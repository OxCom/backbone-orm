// Generated by CoffeeScript 1.6.3
(function() {
  var BATCH_DEFAULT_LIMIT, Cursor, Queue, _;

  _ = require('underscore');

  Queue = require('../queue');

  Cursor = null;

  BATCH_DEFAULT_LIMIT = 1000;

  module.exports = function(model_type, query, iterator, callback) {
    var each_cursor, method, options, parsed_query, processed_count, runBatch, threads;
    if (!Cursor) {
      Cursor = require('../cursor');
    }
    options = query.$each || {};
    threads = options.hasOwnProperty('threads') ? options.threads : 1;
    method = options.json ? 'toJSON' : 'toModels';
    processed_count = 0;
    parsed_query = Cursor.parseQuery(_.omit(query, '$each'));
    runBatch = function(each_cursor, callback) {
      var cursor;
      cursor = model_type.cursor(each_cursor);
      return cursor[method].call(cursor, function(err, models) {
        var model, queue, _fn, _i, _len;
        if (err || !models) {
          return callback(new Error("Failed to get models. Error: " + err));
        }
        if (!models.length) {
          return callback(null, processed_count);
        }
        queue = new Queue(threads);
        _fn = function(model) {
          return queue.defer(function(callback) {
            return iterator(model, callback);
          });
        };
        for (_i = 0, _len = models.length; _i < _len; _i++) {
          model = models[_i];
          _fn(model);
          processed_count++;
          if (parsed_query.cursor.$limit && (processed_count >= parsed_query.cursor.$limit)) {
            break;
          }
        }
        return queue.await(function(err) {
          if (err) {
            return callback(err);
          }
          if (parsed_query.cursor.$limit && (processed_count >= parsed_query.cursor.$limit)) {
            return callback(null, processed_count);
          }
          if (models.length < each_cursor.$limit) {
            return callback(null, processed_count);
          }
          each_cursor.$offset += each_cursor.$limit;
          return runBatch(each_cursor, callback);
        });
      });
    };
    each_cursor = _.extend({
      $limit: options.$limit || BATCH_DEFAULT_LIMIT,
      $offset: parsed_query.cursor.$offset || 0,
      $sort: parsed_query.cursor.$sort || 'id'
    }, parsed_query.find);
    return runBatch(each_cursor, callback);
  };

}).call(this);
