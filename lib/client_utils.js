// Generated by CoffeeScript 1.6.3
/*
  backbone-orm.js 0.0.1
  Copyright (c) 2013 Vidigami - https://github.com/vidigami/backbone-orm
  License: MIT (http://www.opensource.org/licenses/mit-license.php)
  Dependencies: Backbone.js and Underscore.js.
*/


(function() {
  var shim;

  module.exports = shim = function(info) {
    var item, _fn, _i, _len;
    if (typeof window === "undefined" || window === null) {
      return;
    }
    if (!isArray(info)) {
      info = [info];
    }
    _fn = function(item) {
      var components, dep, err, key, path, _j, _k, _len1, _len2, _ref;
      try {
        if (globals.require(item.path)) {
          return;
        }
      } catch (_error) {
        err = _error;
      }
      try {
        dep = typeof window.require === "function" ? window.require(item.path) : void 0;
      } catch (_error) {
        err = _error;
      }
      if (!dep && item.symbol) {
        dep = window;
        _ref = item.symbol.split('.');
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          key = _ref[_j];
          if (!(dep = dep[key])) {
            break;
          }
        }
      }
      if (!dep && item.symbol_path && window.require) {
        components = item.symbol_path.split('.');
        path = components.shift();
        try {
          dep = typeof window.require === "function" ? window.require(path) : void 0;
        } catch (_error) {
          err = _error;
        }
        for (_k = 0, _len2 = components.length; _k < _len2; _k++) {
          key = components[_k];
          if (!(dep = dep != null ? dep[key] : void 0)) {
            break;
          }
        }
      }
      if (!dep) {
        if (item.optional) {
          return;
        }
        throw new Error("Missing dependency: " + item.path);
      }
      register(item.path, (function(exports, require, module) {
        return module.exports = dep;
      }));
      if (item.alias) {
        return register(item.alias, (function(exports, require, module) {
          return module.exports = dep;
        }));
      }
    };
    for (_i = 0, _len = info.length; _i < _len; _i++) {
      item = info[_i];
      _fn(item);
    }
  };

}).call(this);
